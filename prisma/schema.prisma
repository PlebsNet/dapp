/// Database config
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

/// User profiles and assessment data
model User {
  id             String    @id @default(cuid())
  name           String?
  type           String?   // "web2" | "web3" | "anonymous" (added, optional for backward compatibility)
  email          String?   @unique // optional for Web2
  wallet         String?   // optional for Web3 (added)
  image          String?
  emailVerified  DateTime?
  archetype      String?
  answers        Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  completedAt    DateTime?
  lastAssessedAt DateTime?
  sessionCount   Int       @default(1)
  role           Role      @default(USER)
  ethAddress     String?   @unique

  assessments Assessment[]
  feedbacks   LabelFeedback[]

  accounts Account[]
  sessions Session[]

  rephrases QuestionRephrase[]

  @@index([createdAt])
  @@index([lastAssessedAt])
}

/// Record multiple assessment runs per user
model Assessment {
  id        String   @id @default(cuid())
  testId    String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  archetype String
  answers   Json
  createdAt DateTime @default(now())
}

/// Stores feedback on label clarity
model LabelFeedback {
  id        String   @id @default(cuid())
  userId    String?
  label     String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

/// Audit results for clustering runs
model ClusterAudit {
  id         String   @id @default(cuid())
  k          Int
  centroids  Json
  silhouette Float?
  inertia    Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

/// NextAuth account linkage
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// NextAuth session store
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// NextAuth verification tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Represents a question rephrasing session
model QuestionRephrase {
  id               String   @id @default(cuid())
  userId           String?  // optional
  user             User?    @relation(fields: [userId], references: [id])
  sessionId        String?  // for anonymous browser session tracking
  questionId       String   // ID of the original question
  originalQuestion String
  originalAnswer   Int
  rephrasedPrompt  String   // renamed from refinedPrompt
  followUpAnswer   String?  // renamed from refinedAnswer, now a string to store text
  isDoubleNeutral  Boolean? // flag for when both original and follow-up are neutral
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}